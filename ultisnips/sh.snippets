#######################################################################
#                                Ultis                                #
#######################################################################

snippet sheb
#!/usr/bin/env sh
$0
endsnippet

snippet bash
#!/usr/bin/env bash
$0
endsnippet

snippet fun
${1:function_name}() {
	${2:#function_body}
}
$0
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

#######################################################################
#                                Logic                                #
#######################################################################

snippet ternary "[[ condition ]] && a || b"
[[ ${1:condition} ]] && ${2:statement} || ${3:statement}
$0
endsnippet

snippet /case|sw(itch)?/ "case .. esac (case)" rb
case ${1:word} in
	${2:pattern} )
		${0:${VISUAL}};;
esac
endsnippet

snippet elif "elif .. (elif)" b
elif ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL}}
endsnippet

snippet for "for ... done (for)" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet forin "for ... in ... done (forin)" b
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:${VISUAL}}
done
endsnippet

snippet if "if ... then (if)" b
if ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL}}
fi
endsnippet

snippet until "until ... (done)" b
until ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet /wh(ile)?/ "while ... (done)" rb
while ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

# vim:ft=snippets:
